"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=g+wgz+d6t+u60f(ar0$!#o#-$m=(nwcv)!_df5oz^gyuee*e0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ["localhost", "127.0.0.1"]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# -------------------------------------------------------------------
# APPS
# -------------------------------------------------------------------
# Apps nativas de Django
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# Apps de terceros (activar segun uso)
THIRD_PARTY_APPS = [
    "rest_framework",
    "corsheaders",
]

# Apps del proyecto
LOCAL_APPS = [
    "apps.documentos",
    "apps.usuarios",
    "apps.empresas",
    "apps.panel",
    "apps.sitio",
    'apps.proveedores',
    "apps.integraciones",
    'apps.sii',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

AUTH_USER_MODEL = "usuarios.Usuario"   

# -------------------------------------------------------------------
# AUTHENTICATION & LOGIN
# -------------------------------------------------------------------
LOGIN_URL = "usuarios:login"
LOGIN_REDIRECT_URL = "panel:dashboard" 
LOGOUT_REDIRECT_URL = "usuarios:login"

AUTHENTICATION_BACKENDS = [
    "apps.usuarios.backends.EmailRutOrUsernameBackend",
    "django.contrib.auth.backends.ModelBackend",  # respaldo
]


AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", "OPTIONS": {"min_length": 8}},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # 1) Sesión (para tu panel web actual)
        "rest_framework.authentication.SessionAuthentication",
        # 2) JWT (para Postman / apps)
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

# CORS (ajusta orígenes si usas front separado)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    # agrega los tuyos si corresponde
]

# (Opcional) CSRF si consumes desde otro dominio
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# (Opcional recomendado) SimpleJWT
from datetime import timedelta
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# -------------------------------------------------------------------
# TEMPLATES
# -------------------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [BASE_DIR / "templates"], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# -------------------------------------------------------------------
# DATABASE
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# -------------------------------------------------------------------



# DATABASES = {
#      'default': {
#          'ENGINE': 'django.db.backends.sqlite3',
#          'NAME': BASE_DIR / 'db.sqlite3',
#      }
#  }

DATABASES = {
   "default": {
       "ENGINE": "django.db.backends.postgresql",
       "NAME": "sgidt",
       "USER": "sgidt_user",
       "PASSWORD": "admin123",   # la que pusiste
       "HOST": "db",
       "PORT": "5432",
   }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# -------------------------------------------------------------------
# INTERNATIONALIZATION
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# -------------------------------------------------------------------
LANGUAGE_CODE = "es-cl"
TIME_ZONE = "America/Santiago"
USE_I18N = True
USE_TZ = True

# -------------------------------------------------------------------
# STATIC & MEDIA FILES
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# -------------------------------------------------------------------

# Estáticos (versionados)
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]      
STATIC_ROOT = BASE_DIR / "staticfiles"        # para collectstatic en prod

# Media (subidas de usuario)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# (opcional) límites razonables de subida en dev
DATA_UPLOAD_MAX_MEMORY_SIZE = 20 * 1024 * 1024  # 20MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# -------------------------------------------------------------------
# DEFAULTS
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
# -------------------------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Integraciones
# --- Google OAuth (DEV) ---
GOOGLE_CLIENT_ID = "823310417562-k5gtt54p653j47tjidrnq3utt7gdjvmr.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET = "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"
GOOGLE_REDIRECT_URI = "http://localhost:8000/integraciones/google/callback/"
GOOGLE_SCOPES = [
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive.metadata.readonly",
]
# --- Dropbox OAuth (DEV) ---
DROPBOX_APP_KEY = "uz0n2oqo1e2vwcw"
DROPBOX_APP_SECRET = "bywi3h7axhxtwm6"
DROPBOX_REDIRECT_URI = "http://localhost:8000/integraciones/dropbox/callback/"
DROPBOX_SCOPES = ["files.metadata.read", "files.content.read", "files.content.write","sharing.read", "sharing.write",]
# -------------------------------------------------------------------
# EMAIL (usar variables de entorno en prod)
# -------------------------------------------------------------------
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = 'sgidtchile@gmail.com'
EMAIL_HOST_PASSWORD = 'nmoofucdchipkwal'  

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# --- Celery / Redis (dev por defecto) ---
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://redis:6379/1")
CELERY_TASK_ALWAYS_EAGER = True  # True solo para pruebas locales sin worker

# Opcionales pero recomendados
CELERY_TASK_TIME_LIMIT = 60 * 5          # 5 min por doc
CELERY_TASK_SOFT_TIME_LIMIT = 60 * 4
CELERY_WORKER_CONCURRENCY = int(os.getenv("CELERY_WORKER_CONCURRENCY", "1"))

CELERY_TASK_ALWAYS_EAGER = True

CELERY_BEAT_SCHEDULE = {
    "sii-refresh-lote-cada-2min": {
        "task": "apps.sii.tasks.refresh_sii_estado_lote",
        "schedule": 120.0,   # cada 120 segundos
        "args": (180, 200),  # ventana 180 min, máximo 200 documentos por corrida
    },
}


# --- SII ---
SII_USE_MOCK = True   # ← en dev: True. En prod: False (cuando conectes real)
SII_TIMEOUT = 15
SII_BASE_URL = "https://api.sii.cl"   # placeholder para el real
